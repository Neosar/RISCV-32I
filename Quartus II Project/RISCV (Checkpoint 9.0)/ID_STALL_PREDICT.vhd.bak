LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_MISC.ALL;

USE WORK.TOOLBOX.ALL;

ENTITY ID_STALL_PREDICT IS

	PORT 
		 ( 
			RS1  : IN  STD_LOGIC_VECTOR(31 DOWNTO 0); -- RS1 comming from ID
			RS2  : IN  STD_LOGIC_VECTOR(31 DOWNTO 0); -- RS2 comming from ID
			RD   : IN  STD_LOGIC_VECTOR(31 DOWNTO 0); -- RD  comming from EXE
			LOAD : IN  STD_LOGIC;                     -- 1 if command at EXE is Load
			
			-- Local (ID) Signals
			IMGEN : IN STD_LOGIC_VECTOR(2 DOWNTO  0); -- Used to detect U/R/S - Commands
			JUMP  : IN STD_LOGIC; -- Used to detect Jump
			JALR  : IN STD_LOGIC; -- /
			BRANCH: IN STD_LOGIC; -- Used to detect Branches
			
			STALL: OUT STD_LOGIC

		 );

END ID_STALL_PREDICT;

ARCHITECTURE RTL OF ID_STALL_PREDICT IS
	
	SIGNAL GND  : STD_LOGIC := '0';
	SIGNAL BUF_A: STD_LOGIC;
	SIGNAL BUF_B: STD_LOGIC;
	SIGNAL SELECT_RS1 : STD_LOGIC;
	SIGNAL SELECT_RS2 : STD_LOGIC;
	
	SIGNAL OR_A : STD_LOGIC;
	SIGNAL OR_B : STD_LOGIC;
	
	BEGIN

	BUF_A <= AND_REDUCE(RS1 XNOR RD);
	BUF_B <= AND_REDUCE(RS2 XNOR RD);
	--             AUIPC OR LUI:  U IMGEN = 011   ||  JUMP: J  AND ~JALR 
	SELECT_RS1 <= (AND_REDUCE(IMGEN XNOR "011" )) OR (JUMP AND (NOT JALR));                     -- 1 if ID command is AUIPC/LUI/JAL
	--             R:     		  R IMGEN = 111   || BRANCH ||  STORE: IMGEN => 001
	SELECT_RS2 <=  AND_REDUCE(IMGEN XNOR "111")   OR BRANCH OR (AND_REDUCE(IMGEN XNOR "001" )); -- 1 If ID command is Branch/Store/R
	
	MUX_RS1: MUX2X1_BIT
			 PORT MAP (
						D0  => BUF_A,      -- If it is AUIPC or LUI
						D1  => GND,        -- then there is no RS1
						SEL => SELECT_RS1, 
						O   => OR_A
					   );
	MUX_RS2: MUX2X1_BIT
			 PORT MAP (
						D0  => GND,       -- If it is NOT R or Branch or Store 
						D1  => BUF_B,	  -- then there is no RS2
						SEL => SELECT_RS2,
						O   => OR_B
					  );
	
	STALL <= (OR_A OR OR_B) AND LOAD;
	
END RTL;